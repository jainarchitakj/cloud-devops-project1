Description: >
    Carlos Rivas / Udacity 2019

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
    
    SSHLocation:
        Description: Who can SSH to EC2 instances
        Type: String
        Default: 0.0.0.0/0  # everyone

Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          sudo apt-get update -y
          sudo apt-get install awscli
          sudo apt-get install python-pip
          sudo apt-get install apache2 -y
          sudo systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://small03-bucket-059704847943/udacity.zip /var/www/html
          unzip -o udacity.zip        
      # ToDo: AMI ID of Ubuntu Linux machine. Too get one, try creating a VM from the web console. 
      ImageId: ami-04505e74c0741db8d
      # ToDo: Change the key-pair name, as applicable to you. 
      KeyName: Codebuild
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: t2.micro
      IamInstanceProfile: !Ref OPSInstanceProfile
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PUB1-SN"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '1'
      MaxSize: '3'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
    
  
    
        # Create a role for EC2 instances, to which we can attach policies
  OPSRole:
        Type: AWS::IAM::Role
        Properties:
            Description: "An EC2 instance role"
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                - Effect: Allow     
                  Principal:
                    Service: ec2.amazonaws.com
                  Action: sts:AssumeRole

    # Give full S3 access to OPSRole
  OPSRolePolicies:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: OPSRolePolicy
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                - Effect: Allow
                  Action: 's3:*'   # AmazonS3FullAccess
                  Resource: '*'
            Roles: [ !Ref OPSRole ]

    # Create an Instance Profile and attach the OPSRole
  OPSInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            InstanceProfileName: "OPSInstanceProfile"
            Roles: [ !Ref OPSRole ]
    
  OPSSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: !Sub "${AWS::StackName}-SecurityGroup"
            GroupDescription: "Enable HTTP access via port 80, and SSH port 22"
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: !Ref SSHLocation
  
Outputs:
  ConnectString:
    Description: SSH Connect
    Value:
      Fn::Join:
      - ''
      - - 'ssh -i "'
        - 'Codebuild'
        - '.pem" ec2-user@'
     